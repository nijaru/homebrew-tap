name: Update Formula

on:
  repository_dispatch:
    types: [release-published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to (e.g., 0.1.12)'
        required: true
        type: string

jobs:
  update-formula:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.version }}"
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Updating to version: ${VERSION}"

      - name: Download binaries and calculate SHA256
        id: binaries
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Function to download with retry (waits for binaries to be uploaded)
          download_with_retry() {
            local url=$1
            local max_attempts=15
            local attempt=1
            local wait_time=30

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: Downloading $url"

              # Try to download and check if file is valid (>100 bytes)
              if curl -sL "$url" -o /tmp/binary.tar.gz && [ $(wc -c < /tmp/binary.tar.gz) -gt 100 ]; then
                sha256sum /tmp/binary.tar.gz | cut -d' ' -f1
                rm /tmp/binary.tar.gz
                return 0
              fi

              echo "Download failed or file too small, waiting ${wait_time}s before retry..."
              sleep $wait_time
              attempt=$((attempt + 1))
            done

            echo "ERROR: Failed to download after $max_attempts attempts"
            return 1
          }

          # Download ARM64 macOS binary with retry
          ARM64_URL="https://github.com/nijaru/kombrucha/releases/download/v${VERSION}/bru-aarch64-apple-darwin.tar.gz"
          echo "Downloading ARM64 binary (with retry logic)..."
          ARM64_SHA256=$(download_with_retry "${ARM64_URL}")
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to download ARM64 binary"
            exit 1
          fi
          echo "arm64_sha256=${ARM64_SHA256}" >> $GITHUB_OUTPUT
          echo "ARM64 SHA256: ${ARM64_SHA256}"

          # Download x86_64 macOS binary with retry
          X86_64_URL="https://github.com/nijaru/kombrucha/releases/download/v${VERSION}/bru-x86_64-apple-darwin.tar.gz"
          echo "Downloading x86_64 binary (with retry logic)..."
          X86_64_SHA256=$(download_with_retry "${X86_64_URL}")
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to download x86_64 binary"
            exit 1
          fi
          echo "x86_64_sha256=${X86_64_SHA256}" >> $GITHUB_OUTPUT
          echo "x86_64 SHA256: ${X86_64_SHA256}"

      - name: Update formula
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARM64_SHA256="${{ steps.binaries.outputs.arm64_sha256 }}"
          X86_64_SHA256="${{ steps.binaries.outputs.x86_64_sha256 }}"

          # Update using awk for precise control over which sha256 to update
          awk -v version="${VERSION}" -v arm64_sha="${ARM64_SHA256}" -v x86_64_sha="${X86_64_SHA256}" '
          /version "/ { sub(/"[0-9.]+"/, "\"" version "\""); print; next }
          /on_arm/ { in_arm=1 }
          /on_intel/ { in_arm=0; in_intel=1 }
          /url.*bru-aarch64-apple-darwin/ { sub(/v[0-9.]+/, "v" version); print; next }
          /url.*bru-x86_64-apple-darwin/ { sub(/v[0-9.]+/, "v" version); print; next }
          /sha256/ {
            if (in_arm) {
              print "      sha256 \"" arm64_sha "\""
              in_arm=0
              next
            }
            if (in_intel) {
              print "      sha256 \"" x86_64_sha "\""
              in_intel=0
              next
            }
          }
          { print }
          ' Formula/bru.rb > Formula/bru.rb.tmp && mv Formula/bru.rb.tmp Formula/bru.rb

          echo "Formula updated to v${VERSION}"
          cat Formula/bru.rb

      - name: Commit and push changes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/bru.rb

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit - formula already at v${VERSION}"
          else
            git commit -m "chore: update formula to v${VERSION}"
            git push
            echo "âœ“ Formula updated to v${VERSION}"
          fi
